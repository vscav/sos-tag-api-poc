# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Boolean response"""
type BooleanResponse {
  errors: [FieldError!]
  response: Boolean
}

"""Change password input"""
input ChangePasswordInput {
  password: String
  token: String
}

"""Error with message and the associated field"""
type FieldError {
  field: String
  message: String
}

"""Login input"""
input LoginInput {
  email: String
  password: String
}

"""Login response"""
type LoginResponse {
  errors: [FieldError!]
  response: LoginResponseData
}

"""Login response data"""
type LoginResponseData {
  accessToken: String
  user: User
}

type Mutation {
  """
  Change the password of a specific user. It implies that the user has already made a modification request, as a token has to be generated to retrieve the user id.
  """
  changePassword(changePasswordInput: ChangePasswordInput): UserResponse

  """
  Confirm and validate a user. Validation is based on the existence of the email address used during the registration process.
  """
  confirmUser(token: String): BooleanResponse

  """
  Create a QR Code with a custom id. By default, the QR Code is not used.
  """
  createQRCode: QRCodeResponse

  """
  Send an email containing a link that redirect to change password dedicated route on the frontend. The link contains a token that, once decoded, will reveal the user id.
  """
  forgotPassword(userEmail: String): BooleanResponse

  """Log the user in using his email address and his password."""
  login(loginInput: LoginInput): LoginResponse

  """Log the user out. He will no longer be authenticated."""
  logout: BooleanResponse

  """
  Register a new user. To complete the registration, the user will have to confirm his account by following the link that has been sent to him by email.
  """
  register(registerInput: RegisterInput): UserResponse
}

"""Paginated QR Code response"""
type PaginatedQRCodeResponse {
  currentPage: Int
  errors: [FieldError!]
  hasMore: Boolean
  items: [QRCode]
  totalPages: Int
}

"""Paginator input"""
input PaginatorInput {
  limit: Float
  page: Float
}

"""QR Code Schema"""
type QRCode {
  _id: ID
  createdAt: String
  inUse: Boolean
  updatedAt: String
}

"""QR Code response"""
type QRCodeResponse {
  errors: [FieldError!]
  response: QRCode
}

"""QR Codes response"""
type QRCodesResponse {
  errors: [FieldError!]
  response: [QRCode!]
}

type Query {
  """Get the user currently logged in."""
  currentUser: UserResponse

  """Get all QR Codes."""
  qrCodes: QRCodesResponse

  """
  Get QR Codes page by page (by fixing the page and the limit of QR Codes by page).
  """
  qrCodesWithPagination(paginatorInput: PaginatorInput): PaginatedQRCodeResponse

  """Get a user by his id."""
  userById(userId: String): UserResponse

  """Get all users."""
  users: UsersResponse

  """Return a simple welcoming message."""
  welcome: String
}

"""Register input"""
input RegisterInput {
  email: String
  firstname: String
  lastname: String
  password: String
  phone: String
}

"""User Schema"""
type User {
  _id: ID
  confirmed: Boolean
  createdAt: String
  email: String
  firstname: String
  lastname: String
  password: String
  phone: String
  tokenVersion: Int
  updatedAt: String
}

"""User response"""
type UserResponse {
  errors: [FieldError!]
  response: User
}

"""Users response"""
type UsersResponse {
  errors: [FieldError!]
  response: [User!]
}
